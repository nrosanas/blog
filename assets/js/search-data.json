{
  
    
        "post0": {
            "title": "Titanic",
            "content": "import pandas as pd import numpy as np import matplotlib.pyplot as plt from fastai.tabular.all import * from pathlib import Path import seaborn as sns sns.set_palette(&#39;Set1&#39;) sns.set_style(&quot;white&quot;) from sklearn.ensemble import GradientBoostingClassifier from sklearn.model_selection import train_test_split . path = Path(&#39;/home/jupyter/kaggle/titanic/&#39;) train = pd.read_csv(path/&#39;train.csv&#39;) test = pd.read_csv(path/&#39;test.csv&#39;) . Let&#39;s take a look of the data composing the dataset . train.head() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Thayer) | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . Notes about the columns: . Column name Description . PassangerID | Unique identifier for each passanger | . Survived | 1 survived, 0 did not survive | . Pclass | From the problem description: A proxy for socio-economic status (SES) 1 = Upper ,2= Middle, 3 = Lower | . Name | Name of the passanger | . Sex | Sex of passanger | . Age | Age of the passanger, if younger than 1 it will be fractionary | . SibSp | Number of brothers, sisters, stepbrother, stepsister and wife or husband of the given passanger embarked | . Parch | Number of parents or children embarked of the passanger | . Ticket | Ticket number | . Cabin | Cabin number | . Embarked | Port of embarkation -&gt; C = Cherbourg, Q = Queenstown, S = Southampton | . Before preparing the data for our model, let&#39;s take a look how each column influences survivality . sns.displot(data=train, x=&#39;Sex&#39;, hue=&#39;Survived&#39;, multiple = &#39;stack&#39;,alpha=0.6) . &lt;seaborn.axisgrid.FacetGrid at 0x7ffa963e6790&gt; . There is almost double male than female passengers but there is much more female survivors. Next let&#39;s take a look how the passengers where distributed among the classes and age. . g = sns.FacetGrid(train, col=&#39;Pclass&#39;,row=&#39;Sex&#39;,hue=&#39;Survived&#39;, ) g.map(sns.histplot,&#39;Age&#39;, alpha=0.6) g.add_legend() . &lt;seaborn.axisgrid.FacetGrid at 0x7ffa352749d0&gt; . 1st and 2nd class female passengers where much more likely to survive than male passengers from 2nd and 3rd class. . train[&#39;Family&#39;]=(train[&#39;SibSp&#39;]+train[&#39;Parch&#39;]).astype(int) order=[] for i in range(10): order.append(str(i)) a=sns.countplot(data=train, x=&#39;Family&#39;, hue=&#39;Survived&#39;,dodge=True, alpha=0.6) . There are many passengers travelling alone and they are much less likely to survive. Then people who had between 2 and 3 relatives was more likely to survive than the rest of passengers. . g = sns.FacetGrid(train, col=&#39;Family&#39;,row=&#39;Sex&#39;,hue=&#39;Survived&#39;, ) g.map(sns.histplot,&#39;Age&#39;, alpha=0.6) g.add_legend() . &lt;seaborn.axisgrid.FacetGrid at 0x7ffa352a8590&gt; . plt.figure(figsize=(10,10)) a=sns.stripplot(data=train, x=&#39;Family&#39;, y=&#39;Age&#39;, hue=&#39;Survived&#39;, alpha=0.5) . There are some columns not very useful predicting the survival rate of a given passanger, these are: &#39;PassengerId&#39;, &#39;Name&#39;, &#39;Ticket&#39; and &#39;Fare&#39;. We will remove this columns. . def remove_cols(df, cols, debug=False): df.drop(columns = cols, inplace=True); if debug: print(&#39;columns_droped&#39;) return(df) . cols = [&#39;PassengerId&#39;, &#39;Ticket&#39;, &#39;Fare&#39;,&#39;Name&#39;] print(f&#39;This features:{cols} will be removed from the data set&#39;) . This features:[&#39;PassengerId&#39;, &#39;Ticket&#39;, &#39;Fare&#39;, &#39;Name&#39;] will be removed from the data set . We can check the unique values the dataset takes for each column . print(&#39;Number of unique classes in each feature: &#39;) print(train.nunique()) . Number of unique classes in each feature: PassengerId 891 Survived 2 Pclass 3 Name 891 Sex 2 Age 88 SibSp 7 Parch 7 Ticket 681 Fare 248 Cabin 147 Embarked 3 Family 9 dtype: int64 . We can take a look of the missing values in the columns, we can se there is missing data in &#39;Age&#39; and &#39;Cabin&#39;. . print(&#39;Number of passengers missing each feature:&#39;) train.isna().sum() . Number of passengers missing each feature: . PassengerId 0 Survived 0 Pclass 0 Name 0 Sex 0 Age 177 SibSp 0 Parch 0 Ticket 0 Fare 0 Cabin 687 Embarked 2 Family 0 dtype: int64 . We will create a new column indicating is that the data is missing and impute the mean age of the training set and fill cabin with the text &#39;Missing&#39;. Cabin might look as it is not relevant but the letter of leading the number can indicate the deck it was and might be relevant to the survivality. There are also 2 passengers missing where they embarked, this can be very relevant so we will create a new column for missing embarkation port. This might be relevant because it could be very easy to retrieve this information from the survivors. So instead of keeping the whole cabin number, we will just save the cabin letter. . MEAN_AGE = train[&#39;Age&#39;].mean() def fill_na(df,debug=False): df.loc[:,&#39;AgeMissing&#39;] = df[&#39;Age&#39;].isna() # New column for missing data if debug: print(&#39;fillna complete: 1/4&#39;) df[&#39;Age&#39;].fillna(MEAN_AGE, inplace=True) #filling &#39;Age&#39; with the mean if debug: print(&#39;fillna complete: 2/4&#39;) df[&#39;Cabin&#39;].fillna(&#39;Missing&#39;, inplace=True) if debug: print(&#39;fillna complete: 3/4&#39;) df[&#39;Cabin&#39;] = df[&#39;Cabin&#39;].apply(lambda x: x[0]) if debug: print(&#39;fillna complete&#39;) return df . Next is to convert all categorical feature columns to multiple binnary columns using one hot encoding technique. Each category in a given feature will be a new column. . OHE_COLS = [&#39;Pclass&#39;, &#39;Sex&#39;,&#39;Cabin&#39;] def ohe_data(df, columns): new_pd = pd.get_dummies(df) return new_pd . def prepare_data(df, cols, ohe_cols, debug=False): df = df.copy() df = remove_cols(df, cols,debug) df = fill_na(df, debug) df[&#39;Pclass&#39;] = df[&#39;Pclass&#39;].astype(str) df = ohe_data(df, ohe_cols) return df . df_test = pd.read_csv(&#39;test.csv&#39;) full = pd.concat([train,df_test]) . full_clean = prepare_data(full, cols, OHE_COLS,True) . columns_droped fillna complete: 1/4 fillna complete: 2/4 fillna complete: 3/4 fillna complete . train_clean = full_clean.iloc[:len(train)].copy() train_clean1 = train_clean.copy() test_clean = full_clean.iloc[-len(test):].copy() . y = train_clean[&#39;Survived&#39;] . train_clean.drop(columns=&#39;Survived&#39;, inplace=True) . With the data cleaned we can train the classifier. First we need a validation set to check the performance of the classifier with data not used in training . x_train, x_val, y_train, y_val = train_test_split(train_clean,y, test_size=0.2, random_state=42) . clf = GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, max_depth=4, random_state=42) . clf.fit(x_train,y_train) . GradientBoostingClassifier(max_depth=4, random_state=42) . clf.score(x_val,y_val) . 0.8268156424581006 . clf.feature_importances_ . array([0.196895 , 0.03701054, 0.00821784, 0.07522325, 0.00334779, 0.00432062, 0.00666312, 0.12445947, 0.27777409, 0.15556888, 0.00767302, 0.00312347, 0.00811825, 0.00690645, 0.01019694, 0.00303809, 0.00425221, 0.03661539, 0.00028137, 0.01080579, 0.00369918, 0.01580923]) . chart=sns.barplot(x=train_clean.columns, y=clf.feature_importances_,); chart.set_xticklabels(train_clean.columns,rotation=90); . submission = pd.read_csv(&#39;gender_submission.csv&#39;) . test_clean.drop(columns=&#39;Survived&#39;, inplace=True) . test_clean[&#39;Family&#39;]=(test_clean[&#39;SibSp&#39;]+test_clean[&#39;Parch&#39;]).astype(int) . y_sub = clf.predict(test_clean) . submission[&#39;Survived&#39;]=y_sub.astype(int) . submission . PassengerId Survived . 0 892 | 0 | . 1 893 | 0 | . 2 894 | 0 | . 3 895 | 0 | . 4 896 | 0 | . ... ... | ... | . 413 1305 | 0 | . 414 1306 | 1 | . 415 1307 | 0 | . 416 1308 | 0 | . 417 1309 | 0 | . 418 rows × 2 columns . submission.to_csv(&#39;sub.csv&#39;,index=False) . #!kaggle competitions submit titanic -f sub.csv -m &quot;first submision&quot; . Let&#39;s try a more sophisticated method using Fast.ai library . path = Path(&#39;/home/jupyter/kaggle/titanic/&#39;) train = pd.read_csv(path/&#39;train.csv&#39;) test = pd.read_csv(path/&#39;test.csv&#39;) . train.drop(columns=[&#39;PassengerId&#39;,&#39;Ticket&#39;,&#39;Name&#39;],inplace = True) test.drop(columns=[&#39;PassengerId&#39;,&#39;Ticket&#39;,&#39;Name&#39;],inplace = True) . train[&#39;Cabin&#39;] = train[&#39;Cabin&#39;].fillna(value=&#39;Missing&#39;) test[&#39;Cabin&#39;] = train[&#39;Cabin&#39;].fillna(value=&#39;Missing&#39;) . train[&#39;Cabin&#39;] = train[&#39;Cabin&#39;].apply(lambda x:x[0]) test[&#39;Cabin&#39;] = train[&#39;Cabin&#39;].apply(lambda x:x[0]) . train[&#39;Cabin&#39;] . 0 M 1 C 2 M 3 C 4 M .. 886 M 887 B 888 M 889 C 890 M Name: Cabin, Length: 891, dtype: object . y_names = &#39;Survived&#39; cat_names = [&#39;Pclass&#39;,&#39;Sex&#39;,&#39;Cabin&#39;, &#39;Embarked&#39;] cont_names = [&#39;Age&#39;, &#39;SibSp&#39;,&#39;Parch&#39;,] procs = [ Categorify, FillMissing, Normalize] splits = RandomSplitter(valid_pct=0.2)(range_of(train_clean1)) . to = TabularPandas(df=train, cat_names=cat_names, cont_names=cont_names, procs=procs, y_names=y_names, splits=splits, y_block= CategoryBlock,) . dls = to.dataloaders(bs=128) . dls.show_batch() . Pclass Sex Cabin Embarked Age_na Age SibSp Parch Survived . 0 1 | female | D | C | False | 48.999999 | 1.000000e+00 | 3.638987e-09 | 1 | . 1 1 | female | D | S | False | 19.000000 | -6.569921e-09 | 2.000000e+00 | 1 | . 2 2 | male | M | S | False | 27.000000 | -6.569921e-09 | 3.638987e-09 | 0 | . 3 3 | male | M | S | False | 16.000000 | 2.000000e+00 | 3.638987e-09 | 0 | . 4 3 | male | M | S | False | 29.000000 | -6.569921e-09 | 3.638987e-09 | 0 | . 5 2 | female | M | S | False | 25.000000 | -6.569921e-09 | 1.000000e+00 | 1 | . 6 3 | female | M | S | False | 30.000000 | 1.000000e+00 | 1.000000e+00 | 0 | . 7 3 | male | M | S | False | 9.000000 | 5.000000e+00 | 2.000000e+00 | 0 | . 8 1 | female | B | #na# | False | 38.000000 | -6.569921e-09 | 3.638987e-09 | 1 | . 9 2 | male | M | S | False | 23.000000 | -6.569921e-09 | 3.638987e-09 | 0 | . learn = tabular_learner(dls, metrics=[ accuracy],layers=[50,25]) . learn.model . TabularModel( (embeds): ModuleList( (0): Embedding(4, 3) (1): Embedding(3, 3) (2): Embedding(10, 6) (3): Embedding(4, 3) (4): Embedding(3, 3) ) (emb_drop): Dropout(p=0.0, inplace=False) (bn_cont): BatchNorm1d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (layers): Sequential( (0): LinBnDrop( (0): BatchNorm1d(21, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (1): Linear(in_features=21, out_features=50, bias=False) (2): ReLU(inplace=True) ) (1): LinBnDrop( (0): BatchNorm1d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (1): Linear(in_features=50, out_features=25, bias=False) (2): ReLU(inplace=True) ) (2): LinBnDrop( (0): Linear(in_features=25, out_features=2, bias=True) ) ) ) . learn.lr_find() . SuggestedLRs(lr_min=0.05248074531555176, lr_steep=0.015848932787775993) . learn.save(&#39;empty&#39;) . Path(&#39;models/empty.pth&#39;) . learn = learn.load(&#39;empty&#39;) . learn.fit_one_cycle(16,0.005) . epoch train_loss valid_loss accuracy time . 0 | 0.728459 | 0.718059 | 0.421348 | 00:00 | . 1 | 0.690266 | 0.711980 | 0.421348 | 00:00 | . 2 | 0.637795 | 0.696240 | 0.443820 | 00:00 | . 3 | 0.589505 | 0.658333 | 0.719101 | 00:00 | . 4 | 0.554041 | 0.625094 | 0.769663 | 00:00 | . 5 | 0.518881 | 0.606026 | 0.724719 | 00:00 | . 6 | 0.492990 | 0.570334 | 0.775281 | 00:00 | . 7 | 0.475062 | 0.546480 | 0.775281 | 00:00 | . 8 | 0.459507 | 0.517868 | 0.792135 | 00:00 | . 9 | 0.445730 | 0.492939 | 0.820225 | 00:00 | . 10 | 0.435037 | 0.471913 | 0.825843 | 00:00 | . 11 | 0.425183 | 0.455737 | 0.825843 | 00:00 | . 12 | 0.418521 | 0.445701 | 0.820225 | 00:00 | . 13 | 0.410660 | 0.442589 | 0.820225 | 00:00 | . 14 | 0.404275 | 0.444416 | 0.820225 | 00:00 | . 15 | 0.400861 | 0.449209 | 0.820225 | 00:00 | . learn.recorder.plot_loss() . learn.save(&#39;16_epoch&#39;) . Path(&#39;models/16_epoch.pth&#39;) . learn.show_results() . Pclass Sex Cabin Embarked Age_na Age SibSp Parch Survived Survived_pred . 0 1.0 | 1.0 | 3.0 | 3.0 | 1.0 | 0.838125 | -0.468802 | -0.471482 | 1.0 | 1.0 | . 1 1.0 | 2.0 | 3.0 | 1.0 | 1.0 | 1.532691 | 0.427327 | 0.737750 | 0.0 | 0.0 | . 2 3.0 | 1.0 | 8.0 | 3.0 | 1.0 | -0.319484 | -0.468802 | -0.471482 | 0.0 | 1.0 | . 3 1.0 | 2.0 | 2.0 | 1.0 | 1.0 | 2.767474 | -0.468802 | 0.737750 | 0.0 | 0.0 | . 4 1.0 | 1.0 | 2.0 | 0.0 | 1.0 | 2.535952 | -0.468802 | -0.471482 | 1.0 | 1.0 | . 5 1.0 | 2.0 | 3.0 | 1.0 | 1.0 | 1.609865 | 0.427327 | -0.471482 | 0.0 | 0.0 | . 6 1.0 | 1.0 | 4.0 | 3.0 | 1.0 | 1.378343 | 0.427327 | 0.737750 | 1.0 | 1.0 | . 7 3.0 | 2.0 | 8.0 | 3.0 | 1.0 | -0.782528 | -0.468802 | -0.471482 | 0.0 | 0.0 | . 8 2.0 | 2.0 | 8.0 | 3.0 | 1.0 | 2.381604 | 0.427327 | 0.737750 | 0.0 | 0.0 | . dl_test=learn.dls.test_dl(test) . probs,_ =learn.get_preds(dl=dl_test) . y = np.argmax(probs,1) y = np.array(y) . submission[&#39;Survived&#39;]=y.astype(int) . submission.to_csv(&#39;sub.csv&#39;,index=False) !kaggle competitions submit titanic -f sub.csv -m &quot;nn mid&quot; . 100%|██████████████████████████████████████| 2.77k/2.77k [00:02&lt;00:00, 1.07kB/s] Successfully submitted to Titanic: Machine Learning from Disaster . learn.model . TabularModel( (embeds): ModuleList( (0): Embedding(4, 3) (1): Embedding(3, 3) (2): Embedding(10, 6) (3): Embedding(4, 3) (4): Embedding(3, 3) ) (emb_drop): Dropout(p=0.0, inplace=False) (bn_cont): BatchNorm1d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (layers): Sequential( (0): LinBnDrop( (0): BatchNorm1d(21, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (1): Linear(in_features=21, out_features=50, bias=False) (2): ReLU(inplace=True) ) (1): LinBnDrop( (0): BatchNorm1d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (1): Linear(in_features=50, out_features=25, bias=False) (2): ReLU(inplace=True) ) (2): LinBnDrop( (0): Linear(in_features=25, out_features=2, bias=True) ) ) ) . learn.recorder.plot_sched() .",
            "url": "https://nrosanas.github.io/blog/2020/10/14/_Titanic.html",
            "relUrl": "/2020/10/14/_Titanic.html",
            "date": " • Oct 14, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://nrosanas.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://nrosanas.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://nrosanas.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nrosanas.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}